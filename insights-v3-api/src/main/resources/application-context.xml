<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:sec="http://www.springframework.org/schema/security"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:oxm="http://www.springframework.org/schema/oxm" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/oxm http://www.springframework.org/schema/oxm/spring-oxm-3.1.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
		http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.1.xsd">

	<mvc:annotation-driven />

	<context:component-scan base-package="org.gooru.insights.api"/>

	<context:annotation-config />
 	<import resource="hibernate-context.xml" />
 	
	<!-- schduler for removing files 
	 <bean id="excelReportController"
		class="org.gooru.insights.api.controllers.ExcelReportController" />

	<bean id="firstTaskJobDetail"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="excelReportController" />
		<property name="targetMethod" value="removeExpiredFiles" />
	</bean>

	Cron Trigger
	<bean id="cronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail" ref="firstTaskJobDetail" />
		<property name="cronExpression" value="0 0 12 * * ?" />
	</bean>

	<bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="jobDetails">
			<list>
 				<ref bean="firstTaskJobDetail" />
 			</list>
		</property>
		<property name="triggers">
			<list>
				<ref bean="cronTrigger" /> 
			</list>
		</property>
	</bean>
 -->

	<bean id="tomcatUsername" class="java.lang.String">
		<constructor-arg>
			<value>${tomcat.username}</value>
		</constructor-arg>
	</bean>

	<bean id="tomcatPassword" class="java.lang.String">
		<constructor-arg>
			<value>${tomcat.password}</value>
		</constructor-arg>
	</bean>
	
	<jee:jndi-lookup id="jndiDataSourceReadOnly" jndi-name="java:comp/env/jdbc/gooruReadOnlyDS" />

	<bean id="sessionFactoryReadOnly" parent="abstractSessionFactory">
		<qualifier value="sessionFactoryReadOnly" />
		<property name="dataSource" ref="jndiDataSourceReadOnly" />
	</bean> 
	
	<bean id="gooruConstants"
		class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="properties">
			<props>
				<prop key="gooruConfigStyleBuild">${buildNumber}</prop>
				<prop key="insights.api.rest.endpoint">${insights.api.rest.endpoint}</prop>
			</props>
		</property>
	</bean>
	 <bean id="filePath"
		class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="properties">
			<props>
				<prop key="insights.file.app.path">${insights.file.app.path}</prop>
				<prop key="insights.s3.bucket.path">${insights.s3.bucket.path}</prop>
				<prop key="insights.nfs.bucket.path">${insights.nfs.bucket.path}</prop>
				<prop key="insights.profile.url.path">${profile-url}</prop>
				<prop key="insights.file.real.path">${insights.file.real.path}</prop>
			</props>
		</property>
	</bean>
	<bean id="cassandra"
		class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="properties">
			<props>
				<prop key="cluster.name">${cluster.name}</prop>
				<prop key="cluster.hosts">${cluster.hosts}</prop>
				<prop key="log.keyspace">${log.keyspace}</prop>
				<prop key="log.datacentre">${log.datacentre}</prop>

			</props>
		</property>
	</bean> 

	<!-- Redis configuration -->
	<bean id="redisLongTemplate" class="org.springframework.data.redis.core.RedisTemplate">
		<property name="connectionFactory" ref="redisConnectionFactory" />
	</bean>

	<bean id="redisStringTemplate" class="org.springframework.data.redis.core.RedisTemplate">
		<property name="connectionFactory" ref="redisConnectionFactory" />
	</bean>

	<bean id="redisConnectionFactory"
		class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<property name="port" value="${redis.server.port}" />
		<property name="hostName" value="${redis.server.host}" />
	</bean>
	
	<!-- Mailer configuration -->
	<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="host" value="smtp.gmail.com" />
		<property name="port" value="587" />
		<property name="username" value="${smtp.username}" />
		<property name="password" value="${smtp.password}" />
		<property name="javaMailProperties">
			<props>
				<prop key="mail.transport.protocol">smtp</prop>
				<prop key="mail.smtp.auth">true</prop>
				<prop key="mail.smtp.starttls.enable">true</prop>
				<prop key="mail.debug">false</prop>
			</props>
		</property>
	</bean>

	<!-- some pre-configured messages also which are ready to send -->
	<bean id="preConfiguredMessage" class="org.springframework.mail.SimpleMailMessage">
		<property name="to" value="${report.receiver.mail.id}"></property>
		<property name="from" value="${report.sender.mail.id}"></property>
		<property name="subject" value="FATAL - Application crash. Save your job !!" />
	</bean>
	 <bean
		class="org.springframework.core.LocalVariableTableParameterNameDiscoverer" />
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>file:${configSettings}</value>
			</list>
		</property>
		<property name="ignoreUnresolvablePlaceholders" value="true" />
	</bean>
</beans>
